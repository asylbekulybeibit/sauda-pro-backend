import {
  Injectable,
  UnauthorizedException,
  BadRequestException,
  Logger,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, LessThan, MoreThan } from 'typeorm';
import { UsersService } from '../users/users.service';
import { OTP } from './entities/otp.entity';

@Injectable()
export class AuthService {
  private readonly logger = new Logger(AuthService.name);

  constructor(
    private jwtService: JwtService,
    private configService: ConfigService,
    private usersService: UsersService,
    @InjectRepository(OTP)
    private otpRepository: Repository<OTP>
  ) {}

  private randomNumber(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  async generateOTP(phone: string): Promise<void> {
    console.log('\n==================================');
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è OTP –∫–æ–¥–∞');
    console.log('==================================\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π OTP –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    const existingOTP = await this.otpRepository.findOne({
      where: {
        phone,
        isUsed: false,
        expiresAt: MoreThan(new Date()),
      },
    });

    if (existingOTP) {
      console.log(`üîë –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è ${phone}:`);
      console.log(`üëâ ${existingOTP.code}`);
      console.log(`‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${existingOTP.expiresAt}`);
      console.log('\n==================================\n');
      return;
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ OTP –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    await this.otpRepository.delete({
      phone,
      expiresAt: LessThan(new Date()),
    });

    const code = this.randomNumber(1111, 9999).toString();
    const expiresAt = new Date(
      Date.now() + parseInt(this.configService.get('OTP_EXPIRES_IN')) * 1000
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º OTP –≤ –±–∞–∑–µ
    const otp = this.otpRepository.create({
      phone,
      code,
      expiresAt,
    });
    await this.otpRepository.save(otp);

    // –í—ã–≤–æ–¥–∏–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`üîë –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è ${phone}:`);
    console.log(`üëâ ${code}`);
    console.log(`‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${expiresAt}`);
    console.log('\n==================================\n');
  }

  async verifyOTP(
    phone: string,
    code: string
  ): Promise<{ accessToken: string; refreshToken: string }> {
    const otp = await this.otpRepository.findOne({
      where: {
        phone,
        code,
        isUsed: false,
        expiresAt: MoreThan(new Date()),
      },
    });

    if (!otp) {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫');
    }

    // –ü–æ–º–µ—á–∞–µ–º OTP –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    otp.isUsed = true;
    await this.otpRepository.save(otp);

    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await this.usersService.findByPhone(phone);
    if (!user) {
      user = await this.usersService.create({ phone });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const payload = {
      sub: user.id,
      phone: user.phone,
      isSuperAdmin: user.isSuperAdmin,
    };

    const accessToken = this.jwtService.sign(payload);
    const refreshToken = this.jwtService.sign(payload, {
      secret: this.configService.get('REFRESH_TOKEN_SECRET'),
      expiresIn: this.configService.get('REFRESH_TOKEN_EXPIRES_IN'),
    });

    return { accessToken, refreshToken };
  }

  async refreshTokens(
    refreshToken: string
  ): Promise<{ accessToken: string; refreshToken: string }> {
    try {
      const payload = this.jwtService.verify(refreshToken, {
        secret: this.configService.get('REFRESH_TOKEN_SECRET'),
      });

      const user = await this.usersService.findOne(payload.sub);
      const newPayload = { sub: user.id, phone: user.phone };

      const accessToken = this.jwtService.sign(newPayload);
      const newRefreshToken = this.jwtService.sign(newPayload, {
        secret: this.configService.get('REFRESH_TOKEN_SECRET'),
        expiresIn: this.configService.get('REFRESH_TOKEN_EXPIRES_IN'),
      });

      return { accessToken, refreshToken: newRefreshToken };
    } catch (error) {
      throw new UnauthorizedException('Invalid refresh token');
    }
  }
}
