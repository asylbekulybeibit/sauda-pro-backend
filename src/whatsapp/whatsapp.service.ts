import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { NotificationSettings } from '../manager/entities/notification-settings.entity';
import { UserRole } from '../roles/entities/user-role.entity';
import { User } from '../users/entities/user.entity';
import { RoleType } from '../auth/types/role.type';
import { InventoryNotification } from '../manager/entities/inventory-notification.entity';

interface LowStockNotification {
  productName: string;
  currentQuantity: number;
  minQuantity: number;
  warehouseId: string;
  shopId: string;
  warehouseProductId: string;
}

@Injectable()
export class WhatsappService {
  constructor(
    @InjectRepository(UserRole)
    private userRoleRepository: Repository<UserRole>,
    @InjectRepository(User)
    private userRepository: Repository<User>,
    @InjectRepository(NotificationSettings)
    private notificationSettingsRepository: Repository<NotificationSettings>,
    @InjectRepository(InventoryNotification)
    private inventoryNotificationRepository: Repository<InventoryNotification>
  ) {}

  async sendLowStockNotification(data: LowStockNotification) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const notificationRule =
        await this.inventoryNotificationRepository.findOne({
          where: {
            warehouseProductId: data.warehouseProductId,
            warehouseId: data.warehouseId,
            shopId: data.shopId,
          },
        });

      if (!notificationRule?.isEnabled) {
        console.log(
          `[WhatsappService] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${data.productName}`
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      let settings = await this.notificationSettingsRepository.findOne({
        where: {
          shopId: data.shopId,
          warehouseId: data.warehouseId,
          isEnabled: true,
        },
      });

      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 24 —á–∞—Å–∞
      if (!settings) {
        settings = await this.notificationSettingsRepository.save({
          shopId: data.shopId,
          warehouseId: data.warehouseId,
          notificationIntervalHours: 24,
          isEnabled: true,
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const now = new Date();
      if (settings.lastNotificationSent) {
        const hoursSinceLastNotification =
          (now.getTime() - settings.lastNotificationSent.getTime()) /
          (1000 * 60 * 60);

        if (hoursSinceLastNotification < settings.notificationIntervalHours) {
          console.log(
            `[WhatsappService] –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${
              settings.notificationIntervalHours -
              Math.floor(hoursSinceLastNotification)
            } —á–∞—Å–æ–≤`
          );
          return;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
      const managerRoles = await this.userRoleRepository.find({
        where: {
          shopId: data.shopId,
          warehouseId: data.warehouseId,
          type: RoleType.MANAGER,
          isActive: true,
        },
        relations: ['user'],
      });

      if (!managerRoles || managerRoles.length === 0) {
        console.warn(
          '[WhatsappService] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        );
        return;
      }

      const message =
        `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞:\n\n` +
        `üì¶ ${data.productName}\n` +
        `üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${data.currentQuantity}\n` +
        `‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${data.minQuantity}`;

      let notificationSent = false;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
      for (const role of managerRoles) {
        if (!role.user?.phone) {
          console.warn(
            `[WhatsappService] –£ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ${role.user?.id} –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞`
          );
          continue;
        }

        try {
          // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º WhatsApp API
          console.log(
            `[WhatsappService] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä ${role.user.phone}:`,
            message
          );

          // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WhatsApp API
          // await whatsappClient.sendMessage(role.user.phone, message);
          notificationSent = true;
        } catch (error) {
          console.error(
            `[WhatsappService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É ${role.user.id}:`,
            error
          );
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      if (notificationSent) {
        await this.notificationSettingsRepository.update(settings.id, {
          lastNotificationSent: now,
        });
      }

      return notificationSent;
    } catch (error) {
      console.error(
        '[WhatsappService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        error
      );
      throw error;
    }
  }

  async updateNotificationInterval(
    shopId: string,
    warehouseId: string,
    intervalHours: number
  ) {
    try {
      let settings = await this.notificationSettingsRepository.findOne({
        where: {
          shopId,
          warehouseId,
        },
      });

      if (!settings) {
        settings = await this.notificationSettingsRepository.save({
          shopId,
          warehouseId,
          notificationIntervalHours: intervalHours,
          isEnabled: true,
        });
      } else {
        await this.notificationSettingsRepository.update(settings.id, {
          notificationIntervalHours: intervalHours,
        });
      }

      return settings;
    } catch (error) {
      console.error(
        '[WhatsappService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:',
        error
      );
      throw error;
    }
  }
}
